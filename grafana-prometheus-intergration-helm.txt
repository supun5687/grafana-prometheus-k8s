############################# Prometheus Installation ######################################
-----------------------------------------------------------------------------------------------

# Install using Helm

1. Add helm repo

`helm repo add prometheus-community https://prometheus-community.github.io/helm-charts`

2. Update helm repo

`helm repo update`

3. Install helm 

`helm install prometheus prometheus-community/prometheus`

output ==>

NAME: prometheus
LAST DEPLOYED: Sat Jul  6 09:15:00 2024
NAMESPACE: default
STATUS: deployed
REVISION: 1
TEST SUITE: None
NOTES:
The Prometheus server can be accessed via port 80 on the following DNS name from within your cluster:
prometheus-server.default.svc.cluster.local


Get the Prometheus server URL by running these commands in the same shell:
  export POD_NAME=$(kubectl get pods --namespace default -l "app.kubernetes.io/name=prometheus,app.kubernetes.io/instance=prometheus" -o jsonpath="{.items[0].metadata.name}")
  kubectl --namespace default port-forward $POD_NAME 9090


The Prometheus alertmanager can be accessed via port 9093 on the following DNS name from within your cluster:
prometheus-alertmanager.default.svc.cluster.local


Get the Alertmanager URL by running these commands in the same shell:
  export POD_NAME=$(kubectl get pods --namespace default -l "app.kubernetes.io/name=alertmanager,app.kubernetes.io/instance=prometheus" -o jsonpath="{.items[0].metadata.name}")
  kubectl --namespace default port-forward $POD_NAME 9093
#################################################################################
######   WARNING: Pod Security Policy has been disabled by default since    #####
######            it deprecated after k8s 1.25+. use                        #####
######            (index .Values "prometheus-node-exporter" "rbac"          #####
###### .          "pspEnabled") with (index .Values                         #####
######            "prometheus-node-exporter" "rbac" "pspAnnotations")       #####
######            in case you still need it.                                #####
#################################################################################


The Prometheus PushGateway can be accessed via port 9091 on the following DNS name from within your cluster:
prometheus-prometheus-pushgateway.default.svc.cluster.local


Get the PushGateway URL by running these commands in the same shell:
  export POD_NAME=$(kubectl get pods --namespace default -l "app=prometheus-pushgateway,component=pushgateway" -o jsonpath="{.items[0].metadata.name}")
  kubectl --namespace default port-forward $POD_NAME 9091

For more information on running Prometheus, visit:
https://prometheus.io/


4. Expose Prometheus Service

This is required to access prometheus-server using your browser.

`kubectl expose service prometheus-server --type=NodePort --target-port=9090 --name=prometheus-server-ext`
-------
** or Use service LB to expose. following yaml
#prometheus-server-ext.yaml
apiVersion: v1
kind: Service
metadata:
  name: prometheus-server-ext
  namespace: default
  labels:
    app: prometheus
spec:
  type: LoadBalancer
  ports:
    - port: 9090
      targetPort: 9090
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: prometheus
-------
Get lb external ip and access it through port 9090

################## Grafana Installationa #################################
--------------------------------------------------------------------------

# Install using Helm

1. Add helm repo

`helm repo add grafana https://grafana.github.io/helm-charts`

2. Update helm repo

`helm repo update`

3. nstall helm 

`helm install grafana grafana/grafana`

output ==>

NAME: grafana
LAST DEPLOYED: Sat Jul  6 09:46:06 2024
NAMESPACE: default
STATUS: deployed
REVISION: 1
NOTES:
1. Get your 'admin' user password by running:

   kubectl get secret --namespace default grafana -o jsonpath="{.data.admin-password}" | base64 --decode ; echo


2. The Grafana server can be accessed via port 80 on the following DNS name from within your cluster:

   grafana.default.svc.cluster.local

   Get the Grafana URL to visit by running these commands in the same shell:
     export POD_NAME=$(kubectl get pods --namespace default -l "app.kubernetes.io/name=grafana,app.kubernetes.io/instance=grafana" -o jsonpath="{.items[0].metadata.name}")
     kubectl --namespace default port-forward $POD_NAME 3000

3. Login with the password from step 1 and the username: admin
#################################################################################
######   WARNING: Persistence is disabled!!! You will lose your data when   #####
######            the Grafana pod is terminated.                            #####
#################################################################################


--------------------

user : admin
password: osb8AjzJts2j9HXR5Ij6LfJXkzWIa4xFu8tE02pD


4. Expose Grafana Service

`kubectl expose service grafana — type=NodePort — target-port=3000 — name=grafana-ext`

** or Use service LB to expose. following yaml
------------------------
#grafana-ext.yaml
apiVersion: v1
kind: Service
metadata:
  name: grafana-ext
  namespace: default
  labels:
    app: grafana
spec:
  type: LoadBalancer
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/instance: grafana
    app.kubernetes.io/name: grafana
------------------------------------
can access through external ip and port:3000


go to dashbord > create new > imprt > use id 3662


this will give basic metrices
-----------------------------------------------
so we need to get pods and nodes status have to expose prometheus-kube-state-metrics

#prometheus-kube-state-metrics-ext.yaml
apiVersion: v1
kind: Service
metadata:
  name: prometheus-kube-state-metrics-ext
  namespace: default
  labels:
    app: kube-state-metrics
spec:
  type: LoadBalancer
  ports:
    - port: 8080
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/name: kube-state-metrics
